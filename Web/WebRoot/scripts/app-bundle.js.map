{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js"],"names":["App","http","configure","config","withBaseUrl","shipNames","getSingleName","fetch","then","response","json","unshift","data","debug","testing","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot"],"mappings":";;;;;;;;;;;;;;;;MAIaA,cAAAA,cADZ;AAKC,iBAAYC,IAAZ,EAAkB;AAAA;;AAChBA,WAAKC,SAAL,CAAe,kBAAU;AACvBC,eACGC,WADH,CACe,OADf;AAED,OAHD;AAIA,WAAKH,IAAL,GAAYA,IAAZ;AACA,WAAKI,SAAL,GAAiB,EAAjB;AACA,WAAKC,aAAL;AACD;;kBAEDA,yCAAgB;AAAA;;AACd,WAAKL,IAAL,CAAUM,KAAV,CAAgB,MAAhB,EACGC,IADH,CACQ;AAAA,eAAYC,SAASC,IAAT,EAAZ;AAAA,OADR,EAEGF,IAFH,CAEQ,gBAAQ;AACZ,cAAKH,SAAL,CAAeM,OAAf,CAAuBC,IAAvB;AACD,OAJH;AAKD;;;;;;;;;;;oBCxBY;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCSCZ,YAAAA;;;;;;;;;;AANhBa,UAAQZ,MAAR,CAAe;AACba,cAAU;AACRC,wBAAkB;AADV;AADG,GAAf;;AAMO,WAASf,SAAT,CAAmBgB,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYR,KAAhB,EAAuB;AACrBK,cAAQC,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYR,OAAhB,EAAyB;AACvBI,cAAQC,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQM,KAAR,GAAgBhB,IAAhB,CAAqB;AAAA,aAAMU,QAAQO,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UCvBevB,YAAAA;AAAT,WAASA,SAAT,CAAmBC,MAAnB,EAA2B,CAEjC","file":"app-bundle.js","sourcesContent":["import { HttpClient } from 'aurelia-fetch-client';\nimport { inject } from 'aurelia-framework';\n\n@inject(HttpClient)\nexport class App {\n\n  \n\n  constructor(http) { \n    http.configure(config => {\n      config\n        .withBaseUrl('/api/');\n    });\n    this.http = http;\n    this.shipNames = [];\n    this.getSingleName();\n  }\n\n  getSingleName() {\n    this.http.fetch('name')\n      .then(response => response.json())\n      .then(data => {\n        this.shipNames.unshift(data);\n      });\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}